{% extends "_includes/layouts/base.njk" %}

{% block header %}
{% endblock %}

{% block content %}
<div class="h-screen flex items-center justify-center px-4 bg-gradient-to-br from-green-600 to-emerald-800 dark:from-green-900 dark:to-emerald-950">
    <div class="absolute inset-0 opacity-20 bg-[url('/assets/images/pattern.svg')]"></div>
    <div class="w-full max-w-2xl relative z-10">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-8">
            <div class="relative min-h-[400px] flex flex-col justify-between">
                <div class="flex-1 flex items-center">
                    <div class="text-center w-full relative z-20 transition-opacity duration-700" id="main-message">
                        <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Analysing Your Website</h1>
                        <div class="w-full h-2 bg-gray-200 rounded-full mb-4">
                            <div id="progress-bar" class="h-full bg-blue-500 rounded-full transition-all duration-500" style="width: 0%"></div>
                        </div>
                        <p class="text-xl text-gray-600 dark:text-gray-300" id="status-text">
                            We're currently examining {{ websiteUrl }}
                        </p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2" id="progress-text">
                            0% Complete
                        </p>
                    </div>
                </div>

                <div id="screenshot-preview" class="absolute inset-0 opacity-0 transition-all duration-1000 transform translate-y-8">
                    <div class="max-w-md mx-auto text-center">
                        <div class="w-16 h-16 bg-green-600 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-6">
                            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3.5" d="M5 13l4 4L19 7"></path>
                            </svg>
                        </div>
                        <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Website Captured</h1>
                        <p class="text-xl text-gray-600 dark:text-gray-300 mb-6">
                            Here's a preview of your website
                        </p>
                        
                        <div class="aspect-[16/9] w-full relative rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-700 shadow-lg border-2 border-gray-200 dark:border-gray-600 p-2">
                            <div class="absolute inset-0 m-2 rounded overflow-hidden">
                                <img id="preview-image" src="" alt="Website Preview" class="w-full h-full object-cover object-top opacity-0 transition-opacity duration-700" width="1280" height="720">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="space-y-4" id="steps-container">
                <div class="bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <div class="divide-y divide-gray-200 dark:divide-gray-600">
                        <!-- URL Validation -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="url-validation-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Validating URL</span>
                            </div>
                        </div>

                        <!-- DNS Check -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="dns-check-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Checking site response</span>
                            </div>
                        </div>

                        <!-- Site Response -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="site-response-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Verifying site content</span>
                            </div>
                        </div>

                        <!-- Screenshot Capture -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="capture-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Capturing website</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block pageScripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const sessionId = '{{ sessionId }}';
    let checkCount = 0;
    let currentProgress = 0;
    
    console.log('üöÄ Processing page initialized');
    console.log(`üìù Session ID: ${sessionId}`);
    
    function updateProgress(percentage, message = null) {
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');
        
        currentProgress = percentage;
        progressBar.style.width = `${percentage}%`;
        progressText.textContent = `${Math.round(percentage)}% Complete`;
        
        if (message) {
            document.getElementById('status-text').textContent = message;
        }
    }

    function simulateProgress(start, end, duration, callback) {
        const startTime = Date.now();
        
        function update() {
            const currentTime = Date.now();
            const elapsed = currentTime - startTime;
            const progress = Math.min((elapsed / duration) * (end - start) + start, end);
            
            const roundedProgress = Math.round(progress);
            updateProgress(roundedProgress);
            
            if (progress < end) {
                requestAnimationFrame(update);
            } else if (callback) {
                callback();
            }
        }
        
        requestAnimationFrame(update);
    }

    function updateStepStatus(elementId, status, message = null) {
        console.log(`üîÑ Updating status for ${elementId}: ${status}${message ? ` (${message})` : ''}`);
        const element = document.getElementById(elementId);
        const statusText = document.getElementById('status-text');
        
        if (status === 'complete') {
            element.innerHTML = `
                <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            `;
        } else if (status === 'error') {
            element.innerHTML = `
                <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            `;
        }
        
        if (message) {
            statusText.textContent = message;
        }
        
        switch(elementId) {
            case 'url-validation-status':
                simulateProgress(currentProgress, 25, 2000);
                break;
            case 'dns-check-status':
                simulateProgress(currentProgress, 50, 2000);
                break;
            case 'site-response-status':
                simulateProgress(currentProgress, 75, 2000);
                break;
            case 'capture-status':
                simulateProgress(currentProgress, 100, 2000, () => {
                    if (status === 'complete') {
                        setTimeout(() => {
                            const previewContainer = document.getElementById('screenshot-preview');
                            const previewImage = document.getElementById('preview-image');
                            const mainMessage = document.getElementById('main-message');
                            const stepsContainer = document.getElementById('steps-container');
                            
                            if (previewContainer && previewImage && mainMessage && stepsContainer) {
                                previewImage.src = `data:image/jpeg;base64,${data.screenshots[0].image}`;
                                
                                mainMessage.style.opacity = '0';
                                stepsContainer.style.transition = 'opacity 700ms, transform 700ms';
                                stepsContainer.style.opacity = '0';
                                stepsContainer.style.transform = 'translateY(-1rem)';
                                
                                setTimeout(() => {
                                    previewContainer.style.opacity = '1';
                                    previewContainer.style.transform = 'translateY(0)';
                                    previewImage.style.opacity = '1';
                                    
                                    setTimeout(() => {
                                        window.location.href = '/success';
                                    }, 6000);
                                }, 700);
                            }
                        }, 500);
                    }
                });
                break;
        }
    }
    
    async function checkStatus() {
        try {
            if (checkCount === 0) {
                simulateProgress(0, 15, 2000);
            }
            
            console.log(`\nüîç Checking status (Attempt ${checkCount + 1})`);
            const response = await fetch(`/api/validation-status/${sessionId}`);
            
            if (!response.ok) {
                throw new Error(`Status check failed: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üìä Status check response:', data);
            
            if (data.validationResults) {
                console.log('üîÑ Processing validation results:', data.validationResults);
                if (data.validationResults.urlValid) {
                    updateStepStatus('url-validation-status', 'complete');
                }
                if (data.validationResults.dnsValid) {
                    updateStepStatus('dns-check-status', 'complete');
                }
                if (data.validationResults.siteResponds) {
                    updateStepStatus('site-response-status', 'complete');
                }
            }
            
            switch (data.status) {
                case 'completed':
                    console.log('‚úÖ Process completed, checking screenshots...');
                    if (data.screenshots && data.screenshots.length > 0) {
                        console.log(`üì∏ Found ${data.screenshots.length} screenshots`);
                        updateStepStatus('capture-status', 'complete');
                        
                        const previewContainer = document.getElementById('screenshot-preview');
                        const previewImage = document.getElementById('preview-image');
                        const mainMessage = document.getElementById('main-message');
                        const stepsContainer = document.getElementById('steps-container');
                        
                        if (previewContainer && previewImage && mainMessage && stepsContainer) {
                            previewImage.src = `data:image/jpeg;base64,${data.screenshots[0].image}`;
                            
                            setTimeout(() => {
                                mainMessage.style.opacity = '0';
                                stepsContainer.style.transition = 'opacity 700ms, transform 700ms';
                                stepsContainer.style.opacity = '0';
                                stepsContainer.style.transform = 'translateY(-1rem)';
                                
                                setTimeout(() => {
                                    previewContainer.style.opacity = '1';
                                    previewContainer.style.transform = 'translateY(0)';
                                    previewImage.style.opacity = '1';
                                    
                                    setTimeout(() => {
                                        window.location.href = '/success';
                                    }, 6000);
                                }, 300);
                            }, 300);
                            return;
                        }
                    }
                    break;
                    
                case 'failed':
                    const errorMessage = data.error || 'Failed to analyse website';
                    console.error('‚ùå Processing failed:', errorMessage);
                    updateStepStatus('capture-status', 'error', errorMessage);
                    console.log('üîÑ Redirecting to error page...');
                    setTimeout(() => {
                        window.location.href = '/error';
                    }, 3000);
                    return;
                    
                case 'processing':
                    console.log('‚è≥ Still processing...');
                    break;
                    
                default:
                    console.warn('‚ö†Ô∏è Unknown status:', data.status);
            }
            
            checkCount++;
            if (checkCount < 120) {
                console.log(`üîÑ Scheduling next check (${checkCount}/120)`);
                setTimeout(checkStatus, 2000);
            } else {
                console.error('‚ùå Process timed out after 120 attempts');
                updateStepStatus('capture-status', 'error', 'Process timed out');
                setTimeout(() => {
                    window.location.href = '/error';
                }, 3000);
            }
        } catch (error) {
            console.error('‚ùå Error checking status:', error);
            updateStepStatus('capture-status', 'error', 'An error occurred while checking status');
            setTimeout(() => {
                window.location.href = '/error';
            }, 3000);
        }
    }
    
    console.log('üöÄ Starting status checks...');
    checkStatus();
});
</script>
{% endblock %}

{% block footer %}
{% endblock %}