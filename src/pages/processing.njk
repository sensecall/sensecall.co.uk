{% extends "_includes/layouts/base.njk" %}

{% block content %}
<div class="min-h-[80vh] flex items-center justify-center px-4 bg-gradient-to-br from-green-600 to-emerald-800 dark:from-green-900 dark:to-emerald-950">
    <div class="absolute inset-0 opacity-20 bg-[url('/assets/images/pattern.svg')]"></div>
    <div class="w-full max-w-2xl relative z-10">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-8">
            <div class="text-center mb-8">
                <div class="w-16 h-16 mx-auto mb-4">
                    <svg class="w-full h-full text-blue-500 animate-spin" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
                <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">Analysing Your Website</h1>
                <p class="text-lg text-gray-600 dark:text-gray-300" id="status-text">
                    Running initial checks on {{ websiteUrl }}...
                </p>
            </div>

            <div class="space-y-4">
                <div class="bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <div class="divide-y divide-gray-200 dark:divide-gray-600">
                        <!-- URL Validation -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="url-validation-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Validating URL</span>
                            </div>
                        </div>

                        <!-- DNS Check -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="dns-check-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Checking site response</span>
                            </div>
                        </div>

                        <!-- Site Response -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="site-response-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Verifying site content</span>
                            </div>
                        </div>

                        <!-- Screenshot Capture -->
                        <div class="p-4">
                            <div class="flex items-center space-x-3">
                                <div id="capture-status" class="w-5 h-5">
                                    <div class="w-full h-full rounded-full border-2 border-green-500 border-t-transparent animate-spin"></div>
                                </div>
                                <span class="text-gray-700 dark:text-gray-300">Capturing website</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block pageScripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const sessionId = '{{ sessionId }}';
    let checkCount = 0;
    
    console.log('üöÄ Processing page initialized');
    console.log(`üìù Session ID: ${sessionId}`);
    
    function updateStepStatus(elementId, status, message = null) {
        console.log(`üîÑ Updating status for ${elementId}: ${status}${message ? ` (${message})` : ''}`);
        const element = document.getElementById(elementId);
        const statusText = document.getElementById('status-text');
        
        if (status === 'complete') {
            console.log(`‚úÖ Step completed: ${elementId}`);
            element.innerHTML = `
                <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            `;
        } else if (status === 'error') {
            console.log(`‚ùå Step failed: ${elementId}`);
            element.innerHTML = `
                <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            `;
        }
        
        if (message) {
            console.log(`üìù Updating status text: ${message}`);
            statusText.textContent = message;
        }
    }
    
    async function checkStatus() {
        try {
            console.log(`\nüîç Checking status (Attempt ${checkCount + 1})`);
            const response = await fetch(`/api/validation-status/${sessionId}`);
            
            if (!response.ok) {
                throw new Error(`Status check failed: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üìä Status check response:', data);
            
            // Update UI based on validation steps
            if (data.validationResults) {
                console.log('üîÑ Processing validation results:', data.validationResults);
                if (data.validationResults.urlValid) {
                    updateStepStatus('url-validation-status', 'complete');
                }
                if (data.validationResults.dnsValid) {
                    updateStepStatus('dns-check-status', 'complete');
                }
                if (data.validationResults.siteResponds) {
                    updateStepStatus('site-response-status', 'complete');
                }
            }
            
            // Handle different status cases
            switch (data.status) {
                case 'completed':
                    console.log('‚úÖ Process completed, checking screenshots...');
                    if (data.screenshots && data.screenshots.length > 0) {
                        console.log(`üì∏ Found ${data.screenshots.length} screenshots`);
                        updateStepStatus('capture-status', 'complete');
                        console.log('üîÑ Redirecting to success page...');
                        setTimeout(() => {
                            window.location.href = '/success';
                        }, 1500);
                        return;
                    }
                    break;
                    
                case 'failed':
                    const errorMessage = data.error || 'Failed to analyse website';
                    console.error('‚ùå Processing failed:', errorMessage);
                    updateStepStatus('capture-status', 'error', errorMessage);
                    console.log('üîÑ Redirecting to error page...');
                    setTimeout(() => {
                        window.location.href = '/error';
                    }, 3000);
                    return;
                    
                case 'processing':
                    console.log('‚è≥ Still processing...');
                    break;
                    
                default:
                    console.warn('‚ö†Ô∏è Unknown status:', data.status);
            }
            
            checkCount++;
            if (checkCount < 120) {
                console.log(`üîÑ Scheduling next check (${checkCount}/120)`);
                setTimeout(checkStatus, 2000);
            } else {
                console.error('‚ùå Process timed out after 120 attempts');
                updateStepStatus('capture-status', 'error', 'Process timed out');
                setTimeout(() => {
                    window.location.href = '/error';
                }, 3000);
            }
        } catch (error) {
            console.error('‚ùå Error checking status:', error);
            updateStepStatus('capture-status', 'error', 'An error occurred while checking status');
            setTimeout(() => {
                window.location.href = '/error';
            }, 3000);
        }
    }
    
    // Start checking status
    console.log('üöÄ Starting status checks...');
    checkStatus();
});
</script>
{% endblock %}